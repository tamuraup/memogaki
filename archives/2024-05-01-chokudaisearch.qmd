---
title: "chokudai search template"
date: "2024-05-01"
categories: [ahc]
---

chokudai search の練習をしたのでメモ。

```rust
#[derive(PartialEq, Eq, Clone)]
struct State {
    score: i64,
}
impl State {
    fn new() -> Self {
        todo!()
    }
}

impl Ord for State {
    fn cmp(&self, other: &Self) -> Ordering {
        self.score.cmp(&other.score)
    }
}

impl PartialOrd for State {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

fn simple_chokudai_search(inp: &Input, timer: &Timer) {
    let mut beams: Vec<LimitedMaximumHeap<State>> = vec![LimitedMaximumHeap::new(500); 51];

    let mut iter = 0;
    let mut best = 0;
    beams[0].push(State::new());

    'outer: loop {
        iter += 1;
        if timer.t() >= 1.0 {
            break;
        }

        for depth in 0..beams.len() {
            if depth % 10 == 0 && timer.t() >= 1.0 {
                break 'outer;
            }
            if beams[depth].is_empty() {
                continue;
            }
            // ここで複数回 pop すると 幅 > 1 ってこと？
            let state = beams[depth].pop().unwrap();
            // TODO: なにか処理
        }
    }
}
```
